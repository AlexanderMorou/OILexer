using System;
using System.Collections.Generic;
using System.Text;
using System.CodeDom;
using Oilexer.Expression;
using Oilexer.Translation;

namespace Oilexer.Types.Members
{
    /// <summary>
    /// A field member.
    /// </summary>
    public partial class FieldMember :
        Member<IFieldParentType, CodeMemberField>,
        IFieldMember
    {
        /// <summary>
        /// Data member for <see cref="IsStatic"/>.
        /// </summary>
        private bool isStatic = false;
        /// <summary>
        /// Data member for <see cref="IsConstant"/>.
        /// </summary>
        private bool isConstant = false;
        /// <summary>
        /// Data member for <see cref="InitializationExpression"/>.
        /// </summary>
        private IExpression initializationExpression;
        /// <summary>
        /// Data member for <see cref="FieldType"/>.
        /// </summary>
        private ITypeReference fieldType;
        /// <summary>
        /// Data member for <see cref="Summary"/>.
        /// </summary>
        private string summary;
        /// <summary>
        /// Data member for <see cref="Remarks"/>.
        /// </summary>
        private string remarks;
        /// <summary>
        /// Data member for <see cref="HidesPrevious"/>
        /// </summary>
        private bool hidesPrevious;
        public FieldMember(TypedName nameAndType, IFieldParentType parentTarget)
            : base(nameAndType.Name, parentTarget)
        {
            this.FieldType = nameAndType.TypeReference;
        }

        public override CodeMemberField GenerateCodeDom(ICodeDOMTranslationOptions options)
        {
            if (options.BuildTrail != null)
                options.BuildTrail.Push(this);
            CodeMemberField result = new CodeMemberField();
            result.CustomAttributes = this.Attributes.GenerateCodeDom(options);
            result.Type = this.FieldType.GenerateCodeDom(options);
            if (this.IsConstant)
                result.Attributes = MemberAttributes.Const;
            else if (this.IsStatic)
                result.Attributes = MemberAttributes.Static;
            else
                result.Attributes = MemberAttributes.Final;
            result.Attributes |= AccessLevelAttributes(this.AccessLevel);
            if (this.HidesPrevious)
                result.Attributes |= MemberAttributes.New;
            if (options.NameHandler.HandlesName(this))
                result.Name = options.NameHandler.HandleName(this);
            else
                result.Name = this.Name;
            if (this.summary != null && this.summary != string.Empty)
                result.Comments.Add(new CodeCommentStatement(new CodeComment(this.summary, true)));
            if (this.remarks != null && this.remarks != string.Empty)
                result.Comments.Add(new CodeCommentStatement(new CodeComment(this.remarks, true)));
            if (this.InitializationExpression != null)
                result.InitExpression = this.InitializationExpression.GenerateCodeDom(options);
            if (options.BuildTrail != null)
                options.BuildTrail.Pop();
            return result;
        }
        #region IAutoCommentMember Members


        /// <summary>
        /// Returns/sets a string related to the auto-documentation summary comment generated by the system.
        /// </summary>
        public string Summary
        {
            get
            {
                return this.summary;
            }
            set
            {
                this.summary = value;
            }
        }

        /// <summary>
        /// Returns/sets a string related to the auto-documentation remarks comment generated by the system.
        /// </summary>
        public string Remarks
        {
            get
            {
                return this.remarks;
            }
            set
            {
                this.remarks = value;
            }
        }

        #endregion

        #region IFieldMember Members

        public bool IsStatic
        {
            get
            {
                if (this.ParentTarget is IClassType && ((IClassType)this.ParentTarget).IsStatic)
                    return true;
                return this.isStatic;
            }
            set
            {
                this.isStatic = value;
                if (value)
                    this.isConstant = false;
            }
        }

        public bool IsConstant
        {
            get
            {
                return this.isConstant;
            }
            set
            {
                this.isConstant = value;
                if (value)
                    this.isStatic = false;
            }
        }

        public IExpression InitializationExpression
        {
            get
            {
                return this.initializationExpression;
            }
            set
            {
                this.initializationExpression = value;
            }
        }

        public ITypeReference FieldType
        {
            get
            {
                return this.fieldType;
            }
            set
            {
                this.fieldType = value;
            }
        }

        public new IFieldReferenceExpression GetReference()
        {
            return new ReferenceExpression(this);
        }

        #endregion


        protected override IMemberReferenceExpression OnGetReference()
        {
            return this.GetReference();
        }

        /// <summary>
        /// Performs a look-up on the <see cref="FieldMember"/> to determine its 
        /// dependencies.
        /// </summary>
        /// <param name="result">A <see cref="ITypeReferenceCollection"/> which
        /// relates to the <see cref="ITypeReference"/> instance implementations
        /// that the <see cref="FieldMember"/> relies on.</param>
        /// <param name="options">The <see cref="ICodeTranslationOptions"/> which is used to 
        /// guide the gathering process.</param>
        public override void GatherTypeReferences(ref ITypeReferenceCollection result, ICodeTranslationOptions options)
        {
            if (result == null)
                result = new TypeReferenceCollection();
            base.GatherTypeReferences(ref result, options);
            if (this.fieldType != null)
                result.Add(this.FieldType);
            if (this.initializationExpression != null)
                this.InitializationExpression.GatherTypeReferences(ref result, options);
        }

        #region ISignatureTableMember Members

        public bool HidesPrevious
        {
            get
            {
                return this.hidesPrevious;
            }
            set
            {
                this.hidesPrevious = value;
            }
        }

        #endregion
    }
}
