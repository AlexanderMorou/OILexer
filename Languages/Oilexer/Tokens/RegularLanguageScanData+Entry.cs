/* -----------------------------------------------------------\
|  This code was generated by Oilexer.                        |
|  Version: 1.0.0.0                                           |
|-------------------------------------------------------------|
|  To ensure the code works properly,                         |
|  please do not make any changes to the file.                |
|-------------------------------------------------------------|
|  The specific language is C# (Runtime version: v2.0.50727)  |
|  Sub-tool Name: Oilexer.CSharpCodeTranslator                |
|  Sub-tool Version: 1.0.0.0                                  |
\----------------------------------------------------------- */
using System;
using System.Linq;
using AllenCopeland.Abstraction.Slf.Languages.Oilexer;
using AllenCopeland.Abstraction.Slf.Languages.Oilexer.Rules;
using AllenCopeland.Abstraction.Slf.Languages.Oilexer.Tokens;
 /*---------------------------------------------------------------------\
 | Copyright © 2008-2011 Allen C. [Alexander Morou] Copeland Jr.        |
 |----------------------------------------------------------------------|
 | The Abstraction Project's code is provided under a contract-release  |
 | basis.  DO NOT DISTRIBUTE and do not use beyond the contract terms.  |
 \-------------------------------------------------------------------- */

namespace AllenCopeland.Abstraction.Slf.Languages.Oilexer.Tokens
{
    // Module: RootModule
    partial class RegularLanguageScanData
    {
        public class Entry
        {
            private GrammarVocabulary id;
            GrammarBreakdown breakdown;
            public GrammarVocabulary ID
            {
                get
                {
                    return this.id;
                }
            }
            
            public virtual int Length
            {
                get
                {
                    if (this.breakdown.ConstantTokens.Count > 0)
                    {
                        var source = this.breakdown.ConstantTokens[0].Source;
                        if (source is ITokenEofEntry)
                            return 0;
                        return (source.Branches[0][0] as ILiteralTokenItem).Value.ToString().Length;
                    }
                    else if (this.breakdown.LiteralSeriesTokens.Count > 0)
                        return this.breakdown.LiteralSeriesTokens.First().Value.First().SourceItem.Value.ToString().Length;
                    return 0;
                }
            }
            public GrammarVocabulary GetTransition()
            {
                return this.id;
            }
            public Entry(GrammarVocabulary id)
            {
                this.id = id;
                this.breakdown = this.ID.Breakdown;
            }

            public override string ToString()
            {
                return this.ID.ToString();
            }
        }
    }
}
 /* ---------------------------------------------------\
 |  This file took 00:00:00.0052129 to generate.       |
 |  Date generated: 8/26/2011 4:13:06 PM               |
 |  There were 3 types used by this file               |
 |  RegularLanguageReaderTokens, System.Int32, TokenTransition  |
 |-----------------------------------------------------|
 |  There were 1 assemblies referenced:                |
 |  mscorlib                                           |
 \--------------------------------------------------- */
