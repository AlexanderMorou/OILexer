#include      "..\\VB.NET-LexicalGrammar.oilexer";
/*
#ifdef Lexer
#if Lexer == "VBPreprocessor"

/* *
 * From Visual Basic Language Specification 10.0
 * Section 13.2.1 Conditional Compilation
 * */

#include   "..\\..\\Templates\\Templates.oilexer";

Start                                          ::=
    CCStatement:Statements;*                     ;

CCStatement                                   ::=>
    CCConstantDeclaration                        |
    CCIfGroup                                    |
    LogicalLine                                  ;

CCExpression                                  ::=>
    CCExclusiveDisjunctionExpression             ;

CCParenthesizedExpression                      ::=
    '(' CCExpression:InnerExpression; ')'        ;

CCSimpleNameExpression                         ::=
    Identifier                                   ;

CCExclusiveDisjunctionExpression ::=
    BinaryOperationExpression<
        CCExclusiveDisjunctionExpression, 
        @"Xor", 
        CCInclusiveDisjunctionExpression, 
        Left>                                    ;

CCInclusiveDisjunctionExpression               ::=
    BinaryOperationExpression<
        CCInclusiveDisjunctionExpression, 
        (
            @"Or" | 
            @"OrElse"
        ):Operator;, 
        CCConjunctionExpression, 
        Left>                                    ;

CCConjunctionExpression ::=
    BinaryOperationExpression<
        CCConjunctionExpression, 
        (
            @"And" | 
            @"AndAlso"
        ):Operator;, 
        CCNegationExpression, 
        Left>                                    ;

CCNegationExpression ::=
    @"Not"!:IsNegation;? 
    CCRelationalExpression:Target;               ;

CCRelationalExpression ::=
    BinaryOperationExpression<
        CCRelationalExpression, 
        (
            '='                                  | 
            '<' '>'                              | 
            '<'                                  | 
            '<' '='                              | 
            '>'                                  | 
            '>' '='                              | 
            @"Is"                                | 
            @"IsNot"                             | 
            @"Like"
        ):Operator;, 
        CCShiftExpression, 
        Left>                                    |
    @"TypeOf" CCExpression:Target; 
    @"Is" TypeName:TargetType;                   ;

CCShiftExpression ::=
    BinaryOperationExpression<
        CCShiftExpression, 
        (
            '<' '<'                              |
            '>' '>'
        ):Operator;, 
        CCStringConcatenation, 
        Left>                                    ;

CCStringConcatenation ::=
    BinaryOperationExpression<
        CCStringConcatenation, 
        '&', 
        CCAddSubtExpression, 
        Left>                                    ;

CCAddSubtExpression                            ::=
    BinaryOperationExpression<
        CCAddSubtExpression, 
        (
            '+'                                  |
            '-'
        ):Operator;, 
        CCModulusExpression, 
        Left>                                    ;

CCModulusExpression ::=
    BinaryOperationExpression<
        CCModulusExpression, 
        @"Mod", 
        CCIntegerDivisionExpression, 
        Left>                                    ;

CCIntegerDivisionExpression                    ::=
    BinaryOperationExpression<
        CCIntegerDivisionExpression, 
        '\\', 
        CCMulDivExpression, 
        Left>                                    ;

CCMulDivExpression                             ::=
    BinaryOperationExpression<
        CCMulDivExpression, 
        (
            '*'                                  | 
            '/'
        ):Operator;, 
        CCUnaryExpression,
        Left>                                    ;

CCUnaryExpression ::=
    ('+' | '-'):Operator;* 
    CCExponentationExpression:Target;            ;

CCExponentationExpression ::=
    BinaryOperationExpression<
        CCExponentationExpression, 
        '^', 
        CCPrimaryExpression, 
        Left>;

CCCastExpression                              ::=>
    CCDirectTryTypeCast                          |
    CCCastTarget                                 ;

CCCastTarget                                   ::=
    (
        @"CBool"                                 |
        @"CByte"                                 |
        @"CChar"                                 |
        @"CDate"                                 |
        @"CDec"                                  |
        @"CDbl"                                  |
        @"CInt"                                  |
        @"CLng"                                  |
        @"CObj"                                  |
        @"CSByte"                                |
        @"CShort"                                |
        @"CSng"                                  |
        @"CStr"                                  |
        @"CUInt"                                 |
        @"CULng"                                 |
        @"CUShort"
    ):CastTarget;
    '(' CCExpression:Target; ')'                 ;

CCDirectTryTypeCast                            ::=
    (
        @"DirectCast" | 
        @"TryCast" | 
        @"CType"
    ):CastKind;
    CCExpression:Target;
    TypeName:Type;                               ;

CCBooleanConditionalExpression                 ::=
    @"If" 
        '(' 
            CCExpression:BoolExpression; ','
            CCExpression:TruePart;       ','
            CCExpression:FalsePart; 
        ')'                                      ;    

CCNullableConditionalExpression                ::=
    @"If" 
        '(' 
            CCExpression:First; ','
            CCExpression:Second; 
        ')';

CCConditionalExpression                       ::=>
    CCBooleanConditionalExpression               |
    CCNullableConditionalExpression              ;

CCPrimaryExpression                           ::=>
    CCParenthesizedExpression                    |
    CCCastExpression                             |
    CCSimpleNameExpression                       |
    CCConditionalExpression                      |
    Literal                                      ;

CCIfGroup                                      ::=
    '#' @"If" CCExpression:Condition; @"Then"? 
        LineTerminator
    CCStatement:Statements;*
    CCElseIfGroup:ElseIfParts;*
    CCElseGroup:ElsePart;?
    '#' @"End" @"If" LineTerminator;

CCElseIfGroup                                  ::=
    '#' @"ElseIf" CCExpression:Condition; @"Then"?
        LineTerminator
    CCStatement:Statements;*                     ;

CCElseGroup                                    ::=
    '#' @"Else" LineTerminator
    CCStatement:Statements;*                     ;

CCConstantDeclaration                          ::=
    '#' @"Const" Identifier:Name; '=' 
        CCExpression:Value; LineTerminator       ;

/*
#endif
#endif
//*/
