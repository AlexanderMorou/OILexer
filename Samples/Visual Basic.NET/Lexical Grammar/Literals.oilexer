#include           "VB.NET-LexicalGrammar.oilexer";
/* *
 * From Visual Basic Language Specification 10.0
 * Section 13.1.4 Literals
 * */
Literal                                          :=
    BooleanLiteral                                |
    IntegerLiteral                                |
    FloatingPointLiteral                          |
    StringLiteral                                 |
    CharacterLiteral                              |
    DateLiteral                                   |
    Keyword.Nothing                               ;

BooleanLiteral                                   :=
    (Keyword.True | Keyword.False):Value;         ;

IntegerLiteral                                   :=
    IntegralLiteralValue:Value;
    IntegralTypeCharacter:Type;?                  ;

IntegralLiteralValue                             :=
    IntLiteral                                    |
    HexLiteral                                    |
    OctalLiteral                                  ;

IntegralTypeCharacter                            :=
    @'S':ShortCharacter;                          |
    @"US":UnsignedShortCharacter;                 |
    @'I':IntegerCharacter;                        |
    @"UI":UnsignedIntegerCharacter;               |
    @'L':LongCharacter;                           |
    @"UL":UnsignedLongCharacter;                  |
    IntegerTypeCharacter                          |
    LongTypeCharacter                             ;

IntLiteral                                       :=
    Digit+                                        ;

Digit                                            :=
    [0-9]                                         ;

HexDigit                                         :=
    [A-Fa-f0-9]                                   ;

OctalDigit                                       :=
    [0-7]                                         ;

HexLiteral                                       :=
    @"&H" HexDigit+                               ;

OctalLiteral                                     :=
    @"&O" OctalDigit+                             ;

FloatingPointTypeCharacter                       :=
    @'F':SingleCharacter;                         |
    @'R':DoubleCharacter;                         |
    @'D':DecimalCharacter;                        |
    SingleTypeCharacter                           |
    DoubleTypeCharacter                           |
    DecimalTypeCharacter                          ;

FloatingPointLiteral                             :=
    FloatingPointLiteralValue:Value;              
    FloatingPointTypeCharacter:Type;?             |
    IntLiteral:Value;
    FloatingPointTypeCharacter:Type;?             ;

FloatingPointLiteralValue                        :=
    (IntLiteral:WholePart;)? '.' 
    IntLiteral:FloatPart; (Exponent:Exponent;)?   |
    IntLiteral:WholePart; Exponent:Exponent;      ;

Exponent                                         :=
    @'e' ExponentSign:Sign; IntLiteral:Exponent;  ;

ExponentSign                                     :=
    '+':Plus;                                     | 
    '-':Minus;                                    ;

DoubleQuoteCharacter                             :=
    '"'                                           |
    '\u201c'                                      |
    '\u201d'                                      ;

StringLiteral                                    :=
    DoubleQuoteCharacter StringCharacter:Value;+
    DoubleQuoteCharacter                          ;

StringCharacter                                  :=
    [^"\u201c\u201d]                              |
    DoubleQuoteCharacter DoubleQuoteCharacter     ;

CharacterLiteral                                 :=
    DoubleQuoteCharacter StringCharacter
    DoubleQuoteCharacter @'C'                     ;

DateLiteral                                      :=
    '#' WhiteSpace* DateOrTime WhiteSpace* '#'    ; 

DateOrTime                                       :=
    DateValue (WhiteSpace+ TimeValue)?            |
    TimeValue                                     ;

DateValue                                        :=
    IntLiteral:Month; '/' 
    IntLiteral:Day;   '/'
    IntLiteral:Year;                              |
    IntLiteral:Month; '-' 
    IntLiteral:Day;   '-' 
    IntLiteral:Year;                              ;

TimeValue                                        :=
    IntLiteral:Hour;
        (
            (
                ':' IntLiteral:Minute;
                (':' IntLiteral:Second;)?
            )
            (WhiteSpace* AMPM:Period;)?           |
            WhiteSpace* AMPM:Period;
        )                                         ;

AMPM                                             :=
   @"AM":AnteMeridiem;                            |
   @"PM":PostMeridiem;                            ;

