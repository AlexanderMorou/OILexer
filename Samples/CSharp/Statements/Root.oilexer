#include                  "..\\Root.oilexer";
#include                 "Selection.oilexer";
#include                 "Templates.oilexer";

Statement                                ::=>
    LabeledStatement                        |
    DeclarationStatement                    |
    EmbeddedStatement                       ;

EmbeddedStatement                        ::=>
    Block                                   |
    EmptyStatement                          |
    ExpressionStatement                     |
    SelectionStatement                      |
    IterationStatement                      |
    JumpStatement                           |
    TryStatement                            |
    CheckedStatement                        |
    UncheckedStatement                      |
    LockStatement                           |
    UsingStatement                          |
    YieldStatement                          ;

Block                                     ::=
    CParametered<Statement:Statements;*>    ;

EmptyStatement                            ::=
    ';'                                     ;
    
LabeledStatement                          ::=
    Identifier:LabelName; ':'
    Statement:LabelTarget;                  ;

DeclarationStatement                     ::=>
    LocalVariableDeclaration                |
    LocalConstantDeclaration                ;

ExpressionStatement                      ::=>
    InvocationExpression                    |
    ObjectCreationExpression                |
    AssignmentExpression                    |
    CrementExpression                       ;

IterationStatement                       ::=>
    WhileStatement                          |
    DoStatement                             |
    ForStatement                            |
    ForEachStatement                        ;

WhileStatement                            ::=
    "while" 
	Parametered<BooleanExpression:Condition;>
    EmbeddedStatement:Body;                 ;

DoStatement                               ::=
    "do" 
        EmbeddedStatement:Inner;
    "while" 
   Parametered<BooleanExpression:Condition;>;

ForStatement                              ::=
    "for" Parametered<ForInitializer:Initializer;?
        BooleanExpression:Condition;?
        DelimitedList<ExpressionStatement:Iterators;, ','>?>
    EmbeddedStatement:Body;                 ;

ForInitializer                           ::=>
    LocalVariableDeclaration                |
    ForStatementExpressionList              ;
    
ForStatementExpressionList                ::=
    DelimitedList<ExpressionStatement:Initializers;, ','>;

ForEachStatement                          ::=
    "foreach" Parametered<
				LocalVariableType:Type; 
                Identifier:Name;
                  "in"
                Expression:Source;>
    EmbeddedStatement:Body;                 ;

JumpStatement                            ::=>
    BreakStatement                          |
    ContinueStatement                       |
    GotoStatement                           |
    ReturnStatement                         |
    ThrowStatement                          ;

BreakStatement                            ::=
    "break" ';';

ContinueStatement                         ::=
    "continue" ';';

GotoStatement                            ::=>
    GotoLabelStatement                      |
    GotoCaseStatement                       |
    GotoDefaultStatement                    ;

GotoLabelStatement                        ::=
    "goto" Identifier:Target; ';'           ;

GotoCaseStatement                         ::=
    "goto" "case" ConstantExpression:Target;
    ';'                                     ;

GotoDefaultStatement                      ::=
    "goto" "default" ';'                    ;

ReturnStatement                           ::=
    "return" Expression:Value;? ';'         ;

ThrowStatement                            ::=
    "throw" Expression:Thrown; ';'          ;

TryStatement ::=
    "try" Block:Body; 
    (
        CatchClauses:Catches; FinallyClause:Finally;? |
        FinallyClause:Finally;
    );

CatchClauses                              ::=
    SpecificCatchClause:SpecificClauses;+
    GenericCatchClause:GenericCatch;? |
    GenericCatchClause:GenericCatch;;

SpecificCatchClause                       ::=
    "catch" 
    '(' 
        Type Identifier:ExceptionName;? 
    ')'
    Block:Body;                             ;

GenericCatchClause                        ::=
    TermStatement<"catch">                  ;

FinallyClause                             ::=
    TermStatement<"finally">                ;

CheckedStatement                          ::=
    TermStatement<"checked">                ;

UncheckedStatement                        ::=
    TermStatement<"unchecked">              ;

LockStatement                             ::=
    "lock" '(' Expression:Target; ')'
    EmbeddedStatement:Body;;

UsingStatement                            ::=
    EmbeddedStatement<
        "using" 
        Parametered<
        ResourceAcquisition:Target;>>;
//    "using" 
//    '(' 
//        ResourceAcquisition:Target; 
//    ')'
//    EmbeddedStatement:Body;;

ResourceAcquisition                      ::=>
    LocalVariableDeclaration                |
    Expression                              ;

YieldStatement                           ::=>
    YieldBreakStatement                     |
    YieldReturnStatement                    ;

YieldBreakStatement                       ::=
    "yield" "break" ';'                     ;

YieldReturnStatement                      ::=
    "yield" "return" Expression:Return;     ;

