#include                      "Root.oilexer";

/* --------------------------------------- *\
|*              B.2.7: Classes             *|
\* --------------------------------------- */

ExternOperatorHeader<_>                   ::=
    Attributes:Attributes;?
    (
      "public" "static" "extern"            |
      "public" "extern" "static"            |
      "extern" "public" "static"            |
      "static" "public" "extern"            |
      "static" "extern" "public"            |
      "extern" "static" "public"
    );

InternOperatorHeader<_>                   ::=
    Attributes:Attributes;?
    (
      "public" "static"                     |
      "static" "public"                    
    );

DeclareInternExtern<
    Intern:Expect=Rule;, 
    Extern:Expect=Rule;, 
    Body> ::=
    #ifdef Extern
        #return ExternOperatorHeader<> Body';';
    #else
        #define Extern = ExternOperatorHeader<>
            Body ';'                        ;
    #endif
    #ifdef Intern
        #return InternOperatorHeader<> Body Block:Body;;
    #else
        #define Intern = InternOperatorHeader<>
            Body Block:Body;                ;
    #endif                                  ;

OperatorDeclaration                      ::=>
    ExternOperatorDeclaration               |
    InternOperatorDeclaration               ;

ExternOperatorDeclaration                ::=>
    ExternBinaryOperatorDeclaration         |
    ExternTypeOperatorDeclaration           |
    ExternUnaryOperatorDeclaration          ;

InternOperatorDeclaration                ::=>
    InternBinaryOperatorDeclaration         |
    InternTypeOperatorDeclaration           |
    InternUnaryOperatorDeclaration          ;

ExternBinaryOperatorDeclaration           ::=
    DeclareInternExtern<
        InternBinaryOperatorDeclaration,
        ExternBinaryOperatorDeclaration,
        Type:OperatorType;
            "operator"
        (
            '+'                             |
            '-'                             |
            '*'                             |
            '/'                             |
            '%'                             |
            '&'                             |
            '|'                             |
            '^'                             |
            "<<"                            |
            ">>"                            |
            "=="                            |
            "!="                            |
            '>'                             |
            '<'                             |
            "<="                            |
            ">="
        ):Operator;
        '(' 
            Type:LeftType; 
            Identifier:LeftName;
            ',' 
            Type:RightType; 
            Identifier:RightName;
        ')'>                                ;
    
ExternUnaryOperatorDeclaration            ::=
    DeclareInternExtern<
        InternUnaryOperatorDeclaration,
        ExternUnaryOperatorDeclaration,
        Type:OperatorType;
            "operator"
        (
            '+'                             |
            '-'                             |
            '!'                             |
            '~'                             |
            "++"                            |
            "--"                            |
            "true"                          |
            "false"
        ):Operator;
        '('
            Type:OperandType; 
            Identifier:OperandName;
        ')'>                                ;

ExternTypeOperatorDeclaration             ::=
    DeclareInternExtern<
        InternTypeOperatorDeclaration,
        ExternTypeOperatorDeclaration,
        ("implicit" | "explicit"):Operator;
        "operator"
        Type:OperatorType;
        '(' Type:OperandType; ')'>          ;
