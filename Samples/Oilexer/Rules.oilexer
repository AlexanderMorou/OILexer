#ifndef Lexer
#include                    "Oilexer.oilexer";
#elif Lexer == "ToyParser"
#include                   "Language.oilexer";
#endif

ProductionRuleOptions                      ::=  
    '['
        TupleR1<
            GroupClause:Group;,
            MaxLookaheadClause:MaxLookahead;,
            ShortIdentityClause:ShortId;>
    ']';

GroupClause                                ::=
    @"group" ':' Identifier:Group; ';';

MaxLookaheadClause ::= 
    @"max" @"lookahead" ':'
        Integer:LookAheadLimit; ';'          ;

ShortIdentityClause                        ::=
    @"Short" (@"Id" | @"Identity") ':'
        Identifier:Name; ';'                 ;

ProductionRuleEntry                        ::=
    ProductionRuleOptions:Options;?
    Identifier:Name; ('{' Integer:LookAheadLimit; '}')?
        OTuple<
            LanguageOperatorToken.VisualSpanSpecifier!:VisualSpan; /*[+/-]*/
            (
                LanguageOperatorToken.OptionsSeparator /*:*/
                    SpanName:SpanName; 
                LanguageOperatorToken.Terminal
            )? /*;*/, 
            LanguageOperatorToken.ItemIsRecognizer!:ForceRecognizer; /*$*/> 
        LanguageOperatorToken.RuleStart
        RuleTerminals.IsCollapsePoint!:IsCollapsePoint;? /*'>'*/
        ProductionRuleSeries:Items; 
        LanguageOperatorToken.Terminal       ;

ProductionRuleSeries                       ::=
    ProductionRule:Items; 
        (
            LanguageOperatorToken.ExpressionSeparator
            ProductionRule:Items;
        )*;

ProductionRule                             ::=
    ProductionRuleItem:Items;*               ;

ProductionRuleItem                        ::=>
    LiteralProductionRuleItem                |
    SoftReferenceProductionRuleItem          |
    GroupProductionRuleItem                  |
    PreprocessorProductionRuleItem           |
    TemplateReferenceProductionRuleItem      ;

TemplateReferenceProductionRuleItem        ::=
    Identifier:PrimaryName; 
        LanguageOperatorToken.TemplateStart /*<*/
            (
                ProductionRuleSeries:Arguments;
                (
                    LanguageOperatorToken.PartSeparator /*,*/
                    ProductionRuleSeries:Arguments;
                )*
            )?
        LanguageOperatorToken.TemplateEnd /*>*/
        ScannableEntryItemOptions<>?;

PreprocessorProductionRuleItem            ::=>
    PreprocessorIfDirectiveProductionRuleItem;

SoftReferenceProductionRuleItem                              ::=
    Identifier:PrimaryName; 
      (
        LanguageOperatorToken.IdentitySeparator /*.*/
        Identifier:SecondaryName;
      )? ('!'!:IsFlag; | '#':CounterNotifier;)?
       ScannableEntryItemOptions<>?                            ;

PreprocessorIfDirectiveProductionRuleItem                   ::=>
    PreprocessorIfConditionDirectiveProductionRuleItem         |
    PreprocessorIfDefinedDirectiveProductionRuleItem           |
    PreprocessorIfNotDefinedDirectiveProductionRuleItem        ;

PreprocessorIfConditionDirectiveProductionRuleItem           ::=
    PreprocessorType.IfDirective
        PreprocessorIfConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?       
    PreprocessorType.EndIfDirective                             ;

PreprocessorIfDefinedDirectiveProductionRuleItem             ::=
    PreprocessorType.IfDefinedDirective
        PreprocessorIfDefConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?      
    PreprocessorType.EndIfDirective                             ;

PreprocessorIfNotDefinedDirectiveProductionRuleItem          ::=
    PreprocessorType.IfNotDefinedDirective
        PreprocessorIfDefConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?       
    PreprocessorType.EndIfDirective                            ;

PreprocessorElseDirectiveProductionRuleItem                 ::=>
    PreprocessorElseIfConditionDirectiveProductionRuleItem     |
    PreprocessorElseIfDefinedDirectiveProductionRuleItem       |
    PreprocessorElseIfNotDefinedDirectiveProductionRuleItem    |
    PreprocessorFinalElseDirectiveProductionRuleItem           ;

PreprocessorFinalElseDirectiveProductionRuleItem             ::=
    PreprocessorType.ElseDirective
        ProductionRuleSeries:Body;                             ;

PreprocessorElseIfConditionDirectiveProductionRuleItem       ::=
    PreprocessorType.ElseIfDirective
        PreprocessorIfConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?       ;

PreprocessorElseIfDefinedDirectiveProductionRuleItem         ::=
    PreprocessorType.ElseIfDefinedDirective
        PreprocessorIfDefConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?       ;

PreprocessorElseIfNotDefinedDirectiveProductionRuleItem      ::=
    PreprocessorType.ElseIfNotDefinedDirective
        PreprocessorIfDefConditionLogicalOrExp:Condition;
    ProductionRuleSeries:Body;
    (PreprocessorElseDirectiveProductionRuleItem:Next;)?       ;


LiteralProductionRuleItem                 ::=>
    StringProductionRuleItem                 |
    CharProductionRuleItem                   ;

GroupProductionRuleItem                    ::=
    LanguageOperatorToken.BeginGroup /*(*/
        ProductionRuleSeries:Items;
    LanguageOperatorToken.EndGroup   /*)*/
    ScannableEntryItemOptions<>?             ;

StringProductionRuleItem                   ::=
    String:Value; ('!'!:IsFlag; | '#':CounterNotifier;)?
    ScannableEntryItemOptions<>?             ;

CharProductionRuleItem                     ::=
    Char:Value; ('!'!:IsFlag; | '#':CounterNotifier;)?
    ScannableEntryItemOptions<>?             ;


