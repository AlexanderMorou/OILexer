#include                 "..\\Toy++.oilexer";
#include                 "Selection.oilexer";
#include                     "Loops.oilexer";
#include                     "Jumps.oilexer";
#include                "Exceptions.oilexer";

Statement                                ::=>
	LabeledStatement                        |
	DeclarationStatement                    |
	EmbeddedStatement                       ;

EmbeddedStatement                        ::=>
	Block                                   |
	EmptyStatement                          |
	ExpressionStatement                     |
	SelectionStatement                      |
	IterationStatement                      |
	JumpStatement                           |
	TryStatement                            |
	CheckedStatement                        |
	UncheckedStatement                      |
	LockStatement                           |
	UsingStatement                          |
	YieldStatement                          ;

Block                                     ::=
	CParametered<Statement:Statements;*>    ;

EmptyStatement                            ::=
	';'                                     ;

LabeledStatement                          ::=
	Identifier:LabelName; ':'
	Statement:LabelTarget;                  ;

DeclarationStatement                     ::=>
	LocalVariableDeclaration                |
	LocalConstantDeclaration                ;

ExpressionStatement                      ::=>
	InvocationExpression                    |
	ObjectCreationExpression                |
	AssignmentExpression                    |
	CrementExpression                       ;



LockStatement                             ::=
	"lock" '(' Expression:Target; ')'
	EmbeddedStatement:Body;;

UsingStatement                            ::=
	EmbeddedStatement<
		"using" 
		Parametered<
		ResourceAcquisition:Target;>>;

ResourceAcquisition                      ::=>
	LocalVariableDeclaration                |
	Expression                              ;

YieldStatement                           ::=>
	YieldBreakStatement                     |
	YieldReturnStatement                    ;

YieldBreakStatement                       ::=
	"yield" "break" ';'                     ;

YieldReturnStatement                      ::=
	"yield" "return" Expression:Return; ';' ;

