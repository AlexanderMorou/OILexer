#include                   "Members.oilexer";

/* --------------------------------------- *\
|*              B.2.7: Classes             *|
\* --------------------------------------- */

MethodDeclaration                        ::=>
    AbstractMethodDeclaration               |
    ConcreteMethodDeclaration               ;

AbstractMethodDeclaration                 ::=
    Attributes:Attributes;?
    (
        Tuple<"abstract", "new"?, "protected"?, "internal"?>
        Tuple<"abstract", "new"?, "public"?>
    ):Modifiers;
    ReturnType:ReturnType;
    Identifier:Name;
    GenericHeader<'(' FormalParameterList:Parameters;? ')'>
    ';'                                     ;

ConcreteMethodDeclaration                ::=>
    ExternMethodDeclaration                 |
    ExternInterfaceMethodDeclaration        |
    InternInterfaceMethodDeclaration        |
    InternMethodDeclaration                 ;

InternInterfaceMethodDeclaration          ::=
    Attributes:Attributes;?
    "extern"
    "partial"!:IsPartial;?
    ReturnType:ReturnType;
    Type:InterfaceType; '.' Identifier:Name;
    GenericHeader<
        '(' 
            FormalParameterList:Parameters;? 
        ')'>
    Block:Body;                             ;

InternMethodDeclaration                   ::=
    Attributes:Attributes;?
    (
        Tuple<"override", "sealed"?, "internal"?, "protected"?> |
        Tuple<"override", "sealed"?, ("public" | "private")?> |
        OTuple<"new", ("public" | "private"), ("virtual" | "static")> |
        OTuple<"new", "internal", "protected", ("virtual" | "static")> |
    ):Modifiers;
    "partial"!:IsPartial;?
    ReturnType:ReturnType;
    Identifier:Name;
    GenericHeader<
        '(' 
            FormalParameterList:Parameters;? 
        ')'>
    Block:Body;                             ;

ExternInterfaceMethodDeclaration  ::=
    Attributes:Attributes;?
    "extern"
    "partial"!:IsPartial;?
    ReturnType:ReturnType;
    Type:InterfaceType; '.' Identifier:Name;
    GenericHeader<
        '(' 
            FormalParameterList:Parameters;? 
        ')'> ';'                            ;

ExternMethodDeclaration           ::=
    Attributes:Attributes;?
    (
        Tuple<"override", "sealed"?, ("public" | "private")?, "extern"> |
        Tuple<"override", "sealed"?, "internal"?, "protected"?, "extern"> |
        Tuple<"new"?, ("public" | "private")?, ("virtual" | "static")?, "extern"> |
        Tuple<"new"?, "internal"?, "protected"?, ("virtual" | "static")?, "extern">
    ):Modifiers;
    "partial"!:IsPartial;?
    ReturnType:ReturnType;
    Identifier:Name;
    GenericHeader<
        '(' 
            FormalParameterList:Parameters;? 
        ')'> ';'                            ;

/* --------------------------------------- *\
|*            B.2.10: Interfaces           *|
\* --------------------------------------- */

InterfaceMethodDeclaration                ::=
    Attributes:Attributes;?
    "new"!:IsNew;?
    ReturnType:ReturnType;
    Identifier:Name;
    GenericHeader<'(' FormalParameterList:Parameters;? ')'>
    ';'                                     ;

/* --------------------------------------- *\
|*    T*y++ Specific Generic Extensions    *|
\* --------------------------------------- */
TypeParameterMethodDeclaration            ::=
    Attributes:Attributes;?
    ReturnType:ReturnType;
    Identifier:Name;
    GenericHeader<'(' FormalParameterList:Parameters;? ')'>
    ';'                                     ;
