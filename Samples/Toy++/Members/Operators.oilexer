#include                   "Members.oilexer";

/* --------------------------------------- *\
|*              B.2.7: Classes             *|
\* --------------------------------------- */

DeclareInternExtern<
    Intern:Expect=Rule;, 
    Extern:Expect=Rule;, 
    Body> ::=
    #ifdef Extern
        #return 
            Attributes:Attributes;?
            Tuple<"public", "static", "extern">
            Body';';
    #else
        #define Extern = 
            Attributes:Attributes;?
            Tuple<"public", "static", "extern">
            Body ';'                        ;
    #endif
    #ifdef Intern
        #return 
            Attributes:Attributes;?
            Tuple<"public", "static">
            Body Block:Body;                ;
    #else
        #define Intern = 
            Attributes:Attributes;?
            Tuple<"public", "static">
            Body Block:Body;                ;
    #endif                                  ;

OperatorDeclaration                      ::=>
    ExternOperatorDeclaration               |
    InternOperatorDeclaration               ;

ExternOperatorDeclaration                ::=>
    ExternBinaryOperatorDeclaration         |
    ExternTypeOperatorDeclaration           |
    ExternUnaryOperatorDeclaration          ;

InternOperatorDeclaration                ::=>
    InternBinaryOperatorDeclaration         |
    InternTypeOperatorDeclaration           |
    InternUnaryOperatorDeclaration          ;

ExternBinaryOperatorDeclaration           ::=
    DeclareInternExtern<
        InternBinaryOperatorDeclaration,
        ExternBinaryOperatorDeclaration,
        Type:OperatorType;
            "operator"
        (
            '+'                             |
            '-'                             |
            '*'                             |
            '/'                             |
            '%'                             |
            '&'                             |
            '|'                             |
            '^'                             |
            "<<"                            |
            ">>"                            |
            "=="                            |
            "!="                            |
            '>'                             |
            '<'                             |
            "<="                            |
            ">="
        ):Operator;
        '(' 
            TypedName:Left;
            ',' 
            TypedName:Right;
        ')'>                                ;
    
ExternUnaryOperatorDeclaration            ::=
    DeclareInternExtern<
        InternUnaryOperatorDeclaration,
        ExternUnaryOperatorDeclaration,
        Type:OperatorType;
            "operator"
        (
            '+'                             |
            '-'                             |
            '!'                             |
            '~'                             |
            "++"                            |
            "--"                            |
            "true"                          |
            "false"
        ):Operator;
        '('
            TypedName:Operand;
        ')'>                                ;

ExternTypeOperatorDeclaration             ::=
    DeclareInternExtern<
        InternTypeOperatorDeclaration,
        ExternTypeOperatorDeclaration,
        ("implicit" | "explicit"):Operator;
        "operator"
        Type:OperatorType;
        '(' 
            TypedName:Operand;
        ')'>                                ;
