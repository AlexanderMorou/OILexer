#include         "TPPLexicalGrammar.oilexer";

LanguageExtensionsKeywords                 :=
             "capturing":Capturing;         |
                 "token":Token;             |
              "language":Language;          |
                  "with":With;              |
                     'a':A;                 |
                "parser":Parser;            |
                 "named":Named;             |
                   "and":And;               |
                 "lexer":Lexer;             |
            "recognizer":Recognizer;        ;

AttributeTargets                           :=
              "assembly":AssemblyTarget;    |
                 "event":EventTarget;       |
                 "field":FieldTarget;       |
                "method":MethodTarget;      |
                "module":ModuleTarget;      |
                 "param":ParamTarget;       |
              "property":PropertyTarget;    |
                "return":ReturnTarget;      |
                  "type":TypeTarget;        ;
                  
LinqKeywords                               :=
             "ascending":Ascending;         |
                    "by":By;                |
            "descending":Descending;        |
                  "from":From;              |
                "equals":Equals;            |
                  "into":Into;              |
                  "join":Join;              |
                   "let":Let;               |
                 "group":Group;             |
               "orderby":OrderBy;           |
                 "where":Where;             ;

Keywords>Identifier,AttributeTargets       :=
             "__arglist":__ArgList;         |
             "__makeref":__MakeRef;         |
             "__reftype":__RefType;         |
            "__refvalue":__RefValue;        |
                   "add":Add;               |
                 "alias":Alias;             |
                  "base":Base;              |
                 "break":Break;             |
                  "case":Case;              |
                 "catch":Catch;             |
               "checked":Checked;           |
                 "class":Class;             |
              "continue":Continue;          |
               "default":Default;           |
              "delegate":Delegate;          |
                    "do":Do;                |
                  "else":Else;              |
                  "enum":Enum;              |
                 "event":Event;             |
               "finally":Finally;           |
                 "fixed":Fixed;             |
                   "for":For;               |
               "foreach":ForEach;           |
                   "get":Get;               |
                "global":Global;            |
                  "goto":GoTo;              |
                "hidden":Hidden;            |
                    "if":If;                |
                    "in":In;                |
             "interface":Interface;         |
                  "lock":Lock;              |
             "namespace":Namespace;         |
                    "on":On;                |
              "operator":Operator;          |
                   "out":Out;               |
                "params":Params;            |
                   "ref":Ref;               |
                "remove":Remove;            |
                "return":Return;            |
                   "set":Set;               |
                "select":Select;            |
                "sizeof":SizeOf;            |
            "stackalloc":StackAlloc;        |
                "struct":Struct;            |
                "switch":Switch;            |
                  "this":This;              |
                 "throw":Throw;             |
                   "try":Try;               |
                "typeof":TypeOf;            |
             "unchecked":UnChecked;         |
                 "using":Using;             |
                   "var":Var;               |
                 "while":While;             |
                 "yield":Yield;             ;

Modifiers                                  :=
              "abstract":Abstract;          |
                 "const":Const;             |
              "explicit":Explicit;          |
                "extern":Extern;            |
              "implicit":Implicit;          |
              "internal":Internal;          |
                   "new":New;               |
              "override":Override;          |
               "partial":Partial;           |
               "private":Private;           |
             "protected":Protected;         |
                "public":Public;            |
              "readonly":ReadOnly;          |
                "sealed":Sealed;            |
                "static":Static;            |
                "unsafe":Unsafe;            |
               "virtual":Virtual;           |
              "volatile":Volatile;          ;

IntegralDataTypes                          :=
                  "bool":Boolean;           |
                  "byte":Byte;              |
                  "char":Char;              |
               "decimal":Decimal;           |
                "double":Double;            |
                 "float":Float;             |
                   "int":Int32;             |
                  "long":Int64;             |
                "object":Object;            |
                  "uint":UInt32;            |
                 "ulong":UInt64;            |
                "ushort":UInt16;            |
                 "sbyte":SByte;             |
                 "short":Int16;             |
                "string":String;            |
                  "void":Void;              ;

#ifdef Lexer
#if Lexer == "TPPreprocessor"
PreprocessorSymbol :=
                    "if":If;                |
                  "else":Else;              |
                "region":Region;            |
             "endregion":EndRegion;         |
                  "elif":ElseIf;            |
                 "endif":EndIf;             |
               "warning":Warning;           |
                "define":Define;            |
                 "error":Error;             |
                  "line":Line;              |
                "pragma":Pragma;            |
              "undefine":Undefine;          ;

PreprocessorOperator                       :=
                    "!=":NotEqual;          |
                    "==":Equal;             |
                    "&&":And;               |
                    "||":Or;                |
                     '!':Negate;            |
                     ',':Comma;             |
                     '(':LeftParenthesis;   |
                     ')':RightParenthesis;  ;

PreprocessorPound :=
                     '#'                    ;
	
#endif
#endif
